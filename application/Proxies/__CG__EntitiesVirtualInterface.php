<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class VirtualInterface extends \Entities\VirtualInterface implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setMtu($mtu)
    {
        $this->__load();
        return parent::setMtu($mtu);
    }

    public function getMtu()
    {
        $this->__load();
        return parent::getMtu();
    }

    public function setTrunk($trunk)
    {
        $this->__load();
        return parent::setTrunk($trunk);
    }

    public function getTrunk()
    {
        $this->__load();
        return parent::getTrunk();
    }

    public function setChannelgroup($channelgroup)
    {
        $this->__load();
        return parent::setChannelgroup($channelgroup);
    }

    public function getChannelgroup()
    {
        $this->__load();
        return parent::getChannelgroup();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addPhysicalInterface(\Entities\PhysicalInterface $physicalInterfaces)
    {
        $this->__load();
        return parent::addPhysicalInterface($physicalInterfaces);
    }

    public function removePhysicalInterface(\Entities\PhysicalInterface $physicalInterfaces)
    {
        $this->__load();
        return parent::removePhysicalInterface($physicalInterfaces);
    }

    public function getPhysicalInterfaces()
    {
        $this->__load();
        return parent::getPhysicalInterfaces();
    }

    public function addVlanInterface(\Entities\VlanInterface $vlanInterfaces)
    {
        $this->__load();
        return parent::addVlanInterface($vlanInterfaces);
    }

    public function removeVlanInterface(\Entities\VlanInterface $vlanInterfaces)
    {
        $this->__load();
        return parent::removeVlanInterface($vlanInterfaces);
    }

    public function getVlanInterfaces()
    {
        $this->__load();
        return parent::getVlanInterfaces();
    }

    public function addMACAddresses(\Entities\MACAddress $mACAddresses)
    {
        $this->__load();
        return parent::addMACAddresses($mACAddresses);
    }

    public function removeMACAddresses(\Entities\MACAddress $mACAddresses)
    {
        $this->__load();
        return parent::removeMACAddresses($mACAddresses);
    }

    public function getMACAddresses()
    {
        $this->__load();
        return parent::getMACAddresses();
    }

    public function setCustomer(\Entities\Customer $customer = NULL)
    {
        $this->__load();
        return parent::setCustomer($customer);
    }

    public function getCustomer()
    {
        $this->__load();
        return parent::getCustomer();
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function addMACAddresse(\Entities\MACAddress $mACAddresses)
    {
        $this->__load();
        return parent::addMACAddresse($mACAddresses);
    }

    public function removeMACAddresse(\Entities\MACAddress $mACAddresses)
    {
        $this->__load();
        return parent::removeMACAddresse($mACAddresses);
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'description', 'mtu', 'trunk', 'channelgroup', 'id', 'PhysicalInterfaces', 'VlanInterfaces', 'MACAddresses', 'Customer');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}