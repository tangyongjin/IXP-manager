<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \Entities\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setUsername($username)
    {
        $this->__load();
        return parent::setUsername($username);
    }

    public function getUsername()
    {
        $this->__load();
        return parent::getUsername();
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function getPassword()
    {
        $this->__load();
        return parent::getPassword();
    }

    public function setEmail($email)
    {
        $this->__load();
        return parent::setEmail($email);
    }

    public function getEmail()
    {
        $this->__load();
        return parent::getEmail();
    }

    public function setAuthorisedMobile($authorisedMobile)
    {
        $this->__load();
        return parent::setAuthorisedMobile($authorisedMobile);
    }

    public function getAuthorisedMobile()
    {
        $this->__load();
        return parent::getAuthorisedMobile();
    }

    public function setUid($uid)
    {
        $this->__load();
        return parent::setUid($uid);
    }

    public function getUid()
    {
        $this->__load();
        return parent::getUid();
    }

    public function setPrivs($privs)
    {
        $this->__load();
        return parent::setPrivs($privs);
    }

    public function getPrivs()
    {
        $this->__load();
        return parent::getPrivs();
    }

    public function setDisabled($disabled)
    {
        $this->__load();
        return parent::setDisabled($disabled);
    }

    public function getDisabled()
    {
        $this->__load();
        return parent::getDisabled();
    }

    public function setLastupdated($lastupdated)
    {
        $this->__load();
        return parent::setLastupdated($lastupdated);
    }

    public function getLastupdated()
    {
        $this->__load();
        return parent::getLastupdated();
    }

    public function setLastupdatedby($lastupdatedby)
    {
        $this->__load();
        return parent::setLastupdatedby($lastupdatedby);
    }

    public function getLastupdatedby()
    {
        $this->__load();
        return parent::getLastupdatedby();
    }

    public function setCreator($creator)
    {
        $this->__load();
        return parent::setCreator($creator);
    }

    public function getCreator()
    {
        $this->__load();
        return parent::getCreator();
    }

    public function setCreated($created)
    {
        $this->__load();
        return parent::setCreated($created);
    }

    public function getCreated()
    {
        $this->__load();
        return parent::getCreated();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addPreference(\Entities\UserPreference $preferences)
    {
        $this->__load();
        return parent::addPreference($preferences);
    }

    public function removePreference(\Entities\UserPreference $preferences)
    {
        $this->__load();
        return parent::removePreference($preferences);
    }

    public function getPreferences()
    {
        $this->__load();
        return parent::getPreferences();
    }

    public function addChangeLog(\Entities\ChangeLog $changeLogs)
    {
        $this->__load();
        return parent::addChangeLog($changeLogs);
    }

    public function removeChangeLog(\Entities\ChangeLog $changeLogs)
    {
        $this->__load();
        return parent::removeChangeLog($changeLogs);
    }

    public function getChangeLogs()
    {
        $this->__load();
        return parent::getChangeLogs();
    }

    public function setCustomer(\Entities\Customer $customer = NULL)
    {
        $this->__load();
        return parent::setCustomer($customer);
    }

    public function getCustomer()
    {
        $this->__load();
        return parent::getCustomer();
    }

    public function setChildren(\Entities\User $children = NULL)
    {
        $this->__load();
        return parent::setChildren($children);
    }

    public function getChildren()
    {
        $this->__load();
        return parent::getChildren();
    }

    public function getFormattedName()
    {
        $this->__load();
        return parent::getFormattedName();
    }

    public function addChildren(\Entities\User $children)
    {
        $this->__load();
        return parent::addChildren($children);
    }

    public function removeChildren(\Entities\User $children)
    {
        $this->__load();
        return parent::removeChildren($children);
    }

    public function addMeeting(\Entities\Meeting $meetings)
    {
        $this->__load();
        return parent::addMeeting($meetings);
    }

    public function removeMeeting(\Entities\Meeting $meetings)
    {
        $this->__load();
        return parent::removeMeeting($meetings);
    }

    public function getMeetings()
    {
        $this->__load();
        return parent::getMeetings();
    }

    public function setContact(\Entities\Contact $contact = NULL)
    {
        $this->__load();
        return parent::setContact($contact);
    }

    public function getContact()
    {
        $this->__load();
        return parent::getContact();
    }

    public function addLastLogin(\Entities\UserLoginHistory $lastLogins)
    {
        $this->__load();
        return parent::addLastLogin($lastLogins);
    }

    public function removeLastLogin(\Entities\UserLoginHistory $lastLogins)
    {
        $this->__load();
        return parent::removeLastLogin($lastLogins);
    }

    public function getLastLogins()
    {
        $this->__load();
        return parent::getLastLogins();
    }

    public function addApiKey(\Entities\ApiKey $apiKeys)
    {
        $this->__load();
        return parent::addApiKey($apiKeys);
    }

    public function removeApiKey(\Entities\ApiKey $apiKeys)
    {
        $this->__load();
        return parent::removeApiKey($apiKeys);
    }

    public function getApiKeys()
    {
        $this->__load();
        return parent::getApiKeys();
    }

    public function loadPreference($attribute, $index = 0, $includeExpired = false)
    {
        $this->__load();
        return parent::loadPreference($attribute, $index, $includeExpired);
    }

    public function hasPreference($attribute, $index = 0, $includeExpired = false)
    {
        $this->__load();
        return parent::hasPreference($attribute, $index, $includeExpired);
    }

    public function getPreference($attribute, $index = 0, $includeExpired = false)
    {
        $this->__load();
        return parent::getPreference($attribute, $index, $includeExpired);
    }

    public function setPreference($attribute, $value, $operator = '=', $expires = 0, $index = 0)
    {
        $this->__load();
        return parent::setPreference($attribute, $value, $operator, $expires, $index);
    }

    public function addIndexedPreference($attribute, $value, $operator = '=', $expires = 0, $max = 0)
    {
        $this->__load();
        return parent::addIndexedPreference($attribute, $value, $operator, $expires, $max);
    }

    public function cleanExpiredPreferences($asOf = NULL, $attribute = NULL)
    {
        $this->__load();
        return parent::cleanExpiredPreferences($asOf, $attribute);
    }

    public function deletePreference($attribute, $index = NULL)
    {
        $this->__load();
        return parent::deletePreference($attribute, $index);
    }

    public function expungePreferences()
    {
        $this->__load();
        return parent::expungePreferences();
    }

    public function getIndexedPreference($attribute, $withIndex = false, $ignoreExpired = true)
    {
        $this->__load();
        return parent::getIndexedPreference($attribute, $withIndex, $ignoreExpired);
    }

    public function getAssocPreference($attribute, $index = NULL, $ignoreExpired = true)
    {
        $this->__load();
        return parent::getAssocPreference($attribute, $index, $ignoreExpired);
    }

    public function deleteAssocPreference($attribute, $index = NULL)
    {
        $this->__load();
        return parent::deleteAssocPreference($attribute, $index);
    }

    public function _getPreferences()
    {
        $this->__load();
        return parent::_getPreferences();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'username', 'password', 'email', 'authorisedMobile', 'uid', 'privs', 'disabled', 'lastupdated', 'lastupdatedby', 'creator', 'created', 'id', 'Contact', 'ApiKeys', 'LastLogins', 'Meetings', 'Preferences', 'ChangeLogs', 'Customer');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}