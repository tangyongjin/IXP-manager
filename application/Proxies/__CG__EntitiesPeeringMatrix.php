<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PeeringMatrix extends \Entities\PeeringMatrix implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setXAs($xAs)
    {
        $this->__load();
        return parent::setXAs($xAs);
    }

    public function getXAs()
    {
        $this->__load();
        return parent::getXAs();
    }

    public function setYAs($yAs)
    {
        $this->__load();
        return parent::setYAs($yAs);
    }

    public function getYAs()
    {
        $this->__load();
        return parent::getYAs();
    }

    public function setPeeringStatus($peeringStatus)
    {
        $this->__load();
        return parent::setPeeringStatus($peeringStatus);
    }

    public function getPeeringStatus()
    {
        $this->__load();
        return parent::getPeeringStatus();
    }

    public function setUpdated($updated)
    {
        $this->__load();
        return parent::setUpdated($updated);
    }

    public function getUpdated()
    {
        $this->__load();
        return parent::getUpdated();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setXCustomer(\Entities\Customer $xCustomer = NULL)
    {
        $this->__load();
        return parent::setXCustomer($xCustomer);
    }

    public function getXCustomer()
    {
        $this->__load();
        return parent::getXCustomer();
    }

    public function setYCustomer(\Entities\Customer $yCustomer = NULL)
    {
        $this->__load();
        return parent::setYCustomer($yCustomer);
    }

    public function getYCustomer()
    {
        $this->__load();
        return parent::getYCustomer();
    }

    public function setVlan($vlan)
    {
        $this->__load();
        return parent::setVlan($vlan);
    }

    public function getVlan()
    {
        $this->__load();
        return parent::getVlan();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'vlan', 'x_as', 'y_as', 'peering_status', 'updated', 'id', 'XCustomer', 'YCustomer');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}