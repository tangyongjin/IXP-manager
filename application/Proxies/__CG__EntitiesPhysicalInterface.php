<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PhysicalInterface extends \Entities\PhysicalInterface implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setSpeed($speed)
    {
        $this->__load();
        return parent::setSpeed($speed);
    }

    public function getSpeed()
    {
        $this->__load();
        return parent::getSpeed();
    }

    public function setDuplex($duplex)
    {
        $this->__load();
        return parent::setDuplex($duplex);
    }

    public function getDuplex()
    {
        $this->__load();
        return parent::getDuplex();
    }

    public function setMonitorindex($monitorindex)
    {
        $this->__load();
        return parent::setMonitorindex($monitorindex);
    }

    public function getMonitorindex()
    {
        $this->__load();
        return parent::getMonitorindex();
    }

    public function setNotes($notes)
    {
        $this->__load();
        return parent::setNotes($notes);
    }

    public function getNotes()
    {
        $this->__load();
        return parent::getNotes();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setSwitchPort(\Entities\SwitchPort $switchPort = NULL)
    {
        $this->__load();
        return parent::setSwitchPort($switchPort);
    }

    public function getSwitchPort()
    {
        $this->__load();
        return parent::getSwitchPort();
    }

    public function setVirtualInterface(\Entities\VirtualInterface $virtualInterface = NULL)
    {
        $this->__load();
        return parent::setVirtualInterface($virtualInterface);
    }

    public function getVirtualInterface()
    {
        $this->__load();
        return parent::getVirtualInterface();
    }

    public function setFanoutPhysicalInterface(\Entities\PhysicalInterface $fanoutPhysicalInterface = NULL)
    {
        $this->__load();
        return parent::setFanoutPhysicalInterface($fanoutPhysicalInterface);
    }

    public function getFanoutPhysicalInterface()
    {
        $this->__load();
        return parent::getFanoutPhysicalInterface();
    }

    public function setPeeringPhysicalInterface(\Entities\PhysicalInterface $peeringPhysicalInterface = NULL)
    {
        $this->__load();
        return parent::setPeeringPhysicalInterface($peeringPhysicalInterface);
    }

    public function getPeeringPhysicalInterface()
    {
        $this->__load();
        return parent::getPeeringPhysicalInterface();
    }

    public function getRelatedInterface()
    {
        $this->__load();
        return parent::getRelatedInterface();
    }

    public function statusIsConnected()
    {
        $this->__load();
        return parent::statusIsConnected();
    }

    public function statusIsDisabled()
    {
        $this->__load();
        return parent::statusIsDisabled();
    }

    public function statusIsNotConnected()
    {
        $this->__load();
        return parent::statusIsNotConnected();
    }

    public function statusIsAwaitingXConnect()
    {
        $this->__load();
        return parent::statusIsAwaitingXConnect();
    }

    public function statusIsQuarantine()
    {
        $this->__load();
        return parent::statusIsQuarantine();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'status', 'speed', 'duplex', 'monitorindex', 'notes', 'id', 'SwitchPort', 'FanoutPhysicalInterface', 'PeeringPhysicalInterface', 'VirtualInterface');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}